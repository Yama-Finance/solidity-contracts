//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "message_state"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i64,
    pub time_created: TimeDateTime,
    pub msg_id: i64,
    pub block_height: i64,
    pub block_timestamp: TimeDateTime,
    pub processable: bool,
    pub estimated_gas_cost: Option<Decimal>,
    pub error_msg: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    TimeCreated,
    MsgId,
    BlockHeight,
    BlockTimestamp,
    Processable,
    EstimatedGasCost,
    ErrorMsg,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Message,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::TimeCreated => ColumnType::DateTime.def(),
            Self::MsgId => ColumnType::BigInteger.def(),
            Self::BlockHeight => ColumnType::BigInteger.def(),
            Self::BlockTimestamp => ColumnType::DateTime.def(),
            Self::Processable => ColumnType::Boolean.def(),
            Self::EstimatedGasCost => ColumnType::Decimal(Some((78u32, 18u32))).def().null(),
            Self::ErrorMsg => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Message => Entity::belongs_to(super::message::Entity)
                .from(Column::MsgId)
                .to(super::message::Column::Id)
                .into(),
        }
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
